import ballerinax/health.clients.fhir as fhirClient;
#foreach($profilePackage in $profilePackages)
import $profilePackage;
#end


# This connector allows you to connect and interact with any FHIR server
@display {label: "FHIR Client Connector"}
public client class FHIRClientConnector {

    final fhirClient:FHIRConnector fhirConnectorObj;

    public function init(fhirClient:FHIRConnectorConfig fhirConnectorConfig) returns error? {
        self.fhirConnectorObj = check new (fhirConnectorConfig);
    }

    # -------------------------
    # Auto-generated operations
    # -------------------------

#foreach($resource in $resources)
    ## $resource.type resource interactions
#foreach($interaction in $resource.interactions)
#if($interaction == "read")
# + id - The logical ID of the ${resource.type} resource
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Get ${resource.type} by the logical ID"}
    remote function get${resource.type}ById(@display {label: "Logical ID"} string id)
                    returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->getById("$resource.type", id);
    }
#elseif($interaction == "vread")
# + id - The logical ID of the ${resource.type} resource
# + version - The version of the ${resource.type} resource
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Get ${resource.type} by version"}
    remote function get${resource.type}ByVersion(@display {label: "Logical ID"} string id,
            @display {label: "Version ID"} string 'version)
                    returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->getByVersion("$resource.type", id, 'version);
    }
#elseif($interaction == "search-type")
#foreach($param in $resource.searchParams)
    # + $param.resolvedName - Search parameter for ${param.originalName} ($param.type) - $param.documentation
#end
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Search ${resource.type} resources"}
    remote isolated function search${resource.type}(
        #foreach($param in $resource.searchParams)
        #if($param.originalName == "_lastUpdated")
            string[]? $param.resolvedName = ()#if($foreach.hasNext),#end
        #else
            string? $param.resolvedName = ()#if($foreach.hasNext),#end
        #end
        #end
    ) returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        fhirClient:SearchParameters params = {};
        #foreach($param in $resource.searchParams)
        addIfPresent(params, "$param.originalName", $param.resolvedName);
        #end

        return self.fhirConnectorObj->search("$resource.type", mode = fhirClient:POST, searchParameters = params);
    }
#elseif($interaction == "create")
    # + new${resource.type} - A new instance of the ${resource.type} resource
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Create ${resource.type} resource"}
    remote function create${resource.type}(${resource.typeString} new${resource.type})
                    returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->create(new${resource.type}.toJson());
    }
#elseif($interaction == "update")
    # + updated${resource.type} - A new or updated instance of the ${resource.type} resource
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Update ${resource.type} resource"}
    remote function update${resource.type}(${resource.typeString} updated${resource.type})
                    returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->update(updated${resource.type}.toJson());
    }
#elseif($interaction == "patch")
    # + id - The logical ID of the ${resource.type} resource
    # + patch${resource.type} - An updated instance of the ${resource.type} resource
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Patch ${resource.type} resource"}
    remote function patch${resource.type}(string id, ${resource.typeString} patch${resource.type})
                    returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->patch("$resource.type", patch${resource.type}.toJson(), id);
    }
#elseif($interaction == "delete")
    # + id - The logical ID of the ${resource.type} resource
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Delete ${resource.type} resource"}
    remote function delete${resource.type}(string id) returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->delete("$resource.type", id);
    }
#elseif($interaction == "history-instance")
    # + id - The logical ID of the ${resource.type} resource
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Get instance history"}
    remote function get${resource.type}InstanceHistory(@display {label: "Logical ID"} string id)
                    returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->getInstanceHistory("$resource.type", id);
    }
#elseif($interaction == "history-type")
    # + return - Returns a FHIRResponse or FHIRError for the operation
    @display {label: "Get ${resource.type} type history"}
    remote function get${resource.type}History() returns fhirClient:FHIRResponse|fhirClient:FHIRError {
        return check self.fhirConnectorObj->getHistory("$resource.type");
    }
#end

#end
#foreach($operation in $resource.operations)
## $resource.type resource operation: $operation
remote function ${operation.functionName}${resource.type}Operation(@display {label: "Request Mode"} fhirClient:RequestMode mode = fhirClient:${operation.httpMethod},
                                                                             @display {label: "Logical ID"} string? id = (),
                                                                             @display {label: "Query Parameters"} map<string[]>? queryParameters = (),
                                                                             @display {label: "Resource data"} json|xml? data = ())
        returns fhirClient:FHIRResponse|fhirClient:FHIRError {
    return check self.fhirConnectorObj->callOperation("$resource.type", "#[[$]]#${operation.name}", mode, id, queryParameters, data);
}

#end
#end
}
